shoot example code from raylib

#define NUM_SHOOTS 50

typedef struct Shoot {
    Rectangle rec;
    Vector2 speed;
    bool active;
    Color color;
} Shoot;

static Shoot shoot[NUM_SHOOTS] = { 0 };
static int shootRate = 0;

// Initialize shoots
for (int i = 0; i < NUM_SHOOTS; i++) {
    shoot[i].rec.x = player.rec.x;
    shoot[i].rec.y = player.rec.y + player.rec.height / 4;
    shoot[i].rec.width = 10;
    shoot[i].rec.height = 5;
    shoot[i].speed.x = 7;
    shoot[i].speed.y = 0;
    shoot[i].active = false;
    shoot[i].color = MAROON;
}

// Shoot initialization
if (IsKeyDown(KEY_SPACE)) {
    shootRate += 5;

    for (int i = 0; i < NUM_SHOOTS; i++) {
        if (!shoot[i].active && shootRate % 20 == 0) {
            shoot[i].rec.x = player.rec.x;
            shoot[i].rec.y = player.rec.y + player.rec.height / 4;
            shoot[i].active = true;
            break;
        }
    }
}

// Shoot logic
for (int i = 0; i < NUM_SHOOTS; i++) {
    if (shoot[i].active) {
        // Movement
        shoot[i].rec.x += shoot[i].speed.x;

        // Collision with enemy
        for (int j = 0; j < activeEnemies; j++) {
            if (enemy[j].active) {
                if (CheckCollisionRecs(shoot[i].rec, enemy[j].rec)) {
                    shoot[i].active = false;
                    enemy[j].rec.x = GetRandomValue(screenWidth, screenWidth + 1000);
                    enemy[j].rec.y = GetRandomValue(0, screenHeight - enemy[j].rec.height);
                    shootRate = 0;
                    enemiesKill++;
                    score += 100;
                }
            }
        }

        if (shoot[i].rec.x + shoot[i].rec.width >= screenWidth) {
            shoot[i].active = false;
            shootRate = 0;
        }
    }
}
